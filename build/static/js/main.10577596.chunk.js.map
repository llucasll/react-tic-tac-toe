{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","winning","fontWeight","value","TreeOf","map","i","builder","BoardLine","line","board","x","key","squares","winner","some","Math","floor","Board","Game","Array","fill","state","history","xIsNext","moveNumber","reverseHistory","y","this","current","JSON","parse","stringify","nextPlayer","setState","slice","move","handleSquareClick","calculateWinner","xIsTheFirst","status","moves","j","catsGame","reverse","entry","index","length","timeTravel","React","Component","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10577596.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Square = props =>\n\t<button\n\t\tclassName=\"square\"\n\t\tonClick = {props.onClick}\n\t\tstyle = {\n\t\t\tprops.winning?\n\t\t\t\t{fontWeight: \"bold\"}\n\t\t\t\t: {}\n\t\t}\n\t>\n\t\t{props.value}\n\t</button>;\n\nfunction TreeOf (props) {\n\treturn [0, 1, 2].map(i => props.builder(i));\n}\n\nfunction BoardLine (props) {\n\tconst {line, board} = props;\n\t\n\treturn <div className=\"board-row\">\n\t\t<TreeOf builder={x =>\n\t\t\t<Square\n\t\t\t\tkey={x}\n\t\t\t\tvalue={board.squares[line][x]}\n\t\t\t\tonClick={() => board.onClick(x, line)}\n\t\t\t\twinning={board.winner?.some(i => Math.floor(i/3)===line && i%3===x)}\n\t\t\t/>\n\t\t}/>\n\t</div>;\n}\n\nfunction Board (props) {\n\treturn <TreeOf builder={i =>\n\t\t<BoardLine line={i} board={props} key={i} />\n\t}/>;\n}\n\nclass Game extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thistory: [\n\t\t\t\t{\n\t\t\t\t\tsquares: this.#empty,\n\t\t\t\t\txIsNext: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\tmoveNumber: 0,\n\t\t\treverseHistory: false,\n\t\t};\n\t}\n\t\n\t#empty = Array(3).fill(null).map(() => Array(3).fill(null));\n\t\n\tget nextPlayer () { return this.current.xIsNext? 'X' : 'O' };\n\tget winner () { return calculateWinner(this.current.squares)?.winner };\n\tget catsGame () {\n\t\tfor (let i=0; i<3; i++)\n\t\t\tfor (let j=0; j<3; j++)\n\t\t\t\tif (this.current.squares[i][j] === null)\n\t\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\tget current () {\n\t\treturn this.state.history[this.state.moveNumber];\n\t}\n\t\n\thandleSquareClick (x, y) {\n\t\tif (this.winner || this.current.squares[y][x])\n\t\t\treturn;\n\t\t\n\t\tconst squares = JSON.parse(JSON.stringify(this.current.squares));\n\t\tsquares[y][x] = this.nextPlayer;\n\t\tthis.setState({\n\t\t\thistory: [...this.state.history.slice(0, this.state.moveNumber+1), {\n\t\t\t\tsquares,\n\t\t\t\txIsNext: !this.current.xIsNext,\n\t\t\t\tmove: {x: x+1, y: y+1},\n\t\t\t}],\n\t\t\tmoveNumber: this.state.moveNumber + 1,\n\t\t});\n\t}\n\ttimeTravel (i) {\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tmoveNumber: i,\n\t\t});\n\t}\n\t\n\tget status () {\n\t\treturn this.winner?\n\t\t\t'Winner: ' + this.winner\n\t\t\t: this.catsGame?\n\t\t\t\t\"Cat's game.\"\n\t\t\t\t: 'Next player: ' + this.nextPlayer;\n\t}\n\tget moves () {\n\t\tconst history = [...this.state.history];\n\t\tif (this.state.reverseHistory)\n\t\t\thistory.reverse();\n\t\t\n\t\treturn history.map((entry, index) => {\n\t\t\tif (this.state.reverseHistory)\n\t\t\t\tindex = history.length -1 - index;\n\t\t\treturn <li key={index}>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.timeTravel(index)}\n\t\t\t\t\tstyle={\n\t\t\t\t\t\tthis.state.moveNumber === index ?\n\t\t\t\t\t\t\t{fontWeight: \"bold\"}\n\t\t\t\t\t\t\t: {}\n\t\t\t\t\t}\n\t\t\t\t> {\n\t\t\t\t\tindex === 0 ?\n\t\t\t\t\t\t\"Go to start\"\n\t\t\t\t\t\t: `Go to move #${index} (${entry.move.x}, ${entry.move.y})`\n\t\t\t\t} </button>\n\t\t\t</li>\n\t\t});\n\t}\n\t\n\tget xIsTheFirst () {\n\t\treturn this.current.squares === this.#empty?\n\t\t\tthis.current.xIsNext\n\t\t\t: null;\n\t}\n\t\n\trender () {\n\t\treturn <div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board\n\t\t\t\t\tsquares = {this.current.squares}\n\t\t\t\t\tonClick = { (x, y) => this.handleSquareClick(x, y) }\n\t\t\t\t\twinner = {calculateWinner(this.current.squares)?.squares}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"game-info\">\n\t\t\t\t<div className=\"status\"> {\n\t\t\t\t\tthis.xIsTheFirst === null?\n\t\t\t\t\t\tthis.status :\n\t\t\t\t\t\t<button onClick={() => this.setState({\n\t\t\t\t\t\t\t...this.state,\n\t\t\t\t\t\t\thistory: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsquares: this.#empty,\n\t\t\t\t\t\t\t\t\txIsNext: !this.current.xIsNext,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t})}>\n\t\t\t\t\t\t\t{this.xIsTheFirst? \"X\": \"O\"} starts\n\t\t\t\t\t\t</button>\n\t\t\t\t} </div>\n\t\t\t\t\n\t\t\t\t<button onClick={() => this.setState({\n\t\t\t\t\t...this.state,\n\t\t\t\t\treverseHistory: !this.state.reverseHistory,\n\t\t\t\t})}>\n\t\t\t\t\tReverse History order\n\t\t\t\t</button>\n\t\t\t\t<ol>{this.moves}</ol>\n\t\t\t</div>\n\t\t</div>;\n\t}\n}\n\nfunction calculateWinner (squares) {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6],\n\t];\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i].map(i => squares[Math.floor(i/3)][i%3]);\n\t\tif (a && a === b && a === c) {\n\t\t\treturn {\n\t\t\t\twinner: a,\n\t\t\t\tsquares: lines[i],\n\t\t\t};\n\t\t}\n\t}\n\treturn null;\n}\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}